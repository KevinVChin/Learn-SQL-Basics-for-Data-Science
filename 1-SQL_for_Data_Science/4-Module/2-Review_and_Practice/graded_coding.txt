Instructions

All of the questions in this quiz refer to the open source Chinook Database. Please familiarize yourself with the ER diagram in order to familiarize yourself with the table and column names in order to write accurate queries and get the appropriate answers.


https://ucde-rey.s3.amazonaws.com/DSV1015/ChinookDatabaseSchema.png

https://github.com/KevinVChin/Learn-SQL-Basics-for-Data-Science/blob/main/1-SQL_for_Data_Science/4-Module/2-Review_and_Practice/images/ChinookDatabaseSchema.png


Q1) Pull a list of customer ids with the customer’s full name, and address, along with combining their city and country together. Be sure to make a space in between these two and make it UPPER CASE. (e.g. LOS ANGELES USA)

SQL Query:

SELECT 
    CustomerID,
    FirstName || ' ' || LastName AS FullName,
    Address,
    UPPER(City || ' ' || Country) AS CityCountry
FROM
    Customers


SQL Output:

+------------+-----------------------+--------------------------------------+----------------------------+
| CustomerId | FullName              | Address                              | CityCountry                |
+------------+-----------------------+--------------------------------------+----------------------------+
|          1 | Luís Gonçalves        | Av. Brigadeiro Faria Lima, 2170      | SãO JOSé DOS CAMPOS BRAZIL |
|          2 | Leonie Köhler         | Theodor-Heuss-Straße 34              | STUTTGART GERMANY          |
|          3 | François Tremblay     | 1498 rue Bélanger                    | MONTRéAL CANADA            |
|          4 | Bjørn Hansen          | Ullevålsveien 14                     | OSLO NORWAY                |
|          5 | František Wichterlová | Klanova 9/506                        | PRAGUE CZECH REPUBLIC      |
|          6 | Helena Holý           | Rilská 3174/6                        | PRAGUE CZECH REPUBLIC      |
|          7 | Astrid Gruber         | Rotenturmstraße 4, 1010 Innere Stadt | VIENNE AUSTRIA             |
|          8 | Daan Peeters          | Grétrystraat 63                      | BRUSSELS BELGIUM           |
|          9 | Kara Nielsen          | Sønder Boulevard 51                  | COPENHAGEN DENMARK         |
|         10 | Eduardo Martins       | Rua Dr. Falcão Filho, 155            | SãO PAULO BRAZIL           |
|         11 | Alexandre Rocha       | Av. Paulista, 2022                   | SãO PAULO BRAZIL           |
|         12 | Roberto Almeida       | Praça Pio X, 119                     | RIO DE JANEIRO BRAZIL      |
|         13 | Fernanda Ramos        | Qe 7 Bloco G                         | BRASíLIA BRAZIL            |
|         14 | Mark Philips          | 8210 111 ST NW                       | EDMONTON CANADA            |
|         15 | Jennifer Peterson     | 700 W Pender Street                  | VANCOUVER CANADA           |
|         16 | Frank Harris          | 1600 Amphitheatre Parkway            | MOUNTAIN VIEW USA          |
|         17 | Jack Smith            | 1 Microsoft Way                      | REDMOND USA                |
|         18 | Michelle Brooks       | 627 Broadway                         | NEW YORK USA               |
|         19 | Tim Goyer             | 1 Infinite Loop                      | CUPERTINO USA              |
|         20 | Dan Miller            | 541 Del Medio Avenue                 | MOUNTAIN VIEW USA          |
|         21 | Kathy Chase           | 801 W 4th Street                     | RENO USA                   |
|         22 | Heather Leacock       | 120 S Orange Ave                     | ORLANDO USA                |
|         23 | John Gordon           | 69 Salem Street                      | BOSTON USA                 |
|         24 | Frank Ralston         | 162 E Superior Street                | CHICAGO USA                |
|         25 | Victor Stevens        | 319 N. Frances Street                | MADISON USA                |
+------------+-----------------------+--------------------------------------+----------------------------+
(Output limit exceeded, 25 of 59 total rows shown)


What is the city and country result for CustomerID 16?

A1) MOUNTAIN VIEW USA





Q2) Create a new employee user id by combining the first 4 letters of the employee’s first name with the first 2 letters of the employee’s last name. Make the new field lower case and pull each individual step to show your work.

SQL Query:

SELECT
    FirstName,
    SUBSTR(FirstName, 1, 4) AS FirstName4,
    LastName,
    SUBSTR(LastName, 1, 2) AS LastName2,
    LOWER(SUBSTR(FirstName, 1, 4) || SUBSTR(LastName, 1, 2)) AS NewEmployeeId
FROM
    Employees


SQL Output:

+-----------+------------+----------+-----------+---------------+
| FirstName | FirstName4 | LastName | LastName2 | NewEmployeeId |
+-----------+------------+----------+-----------+---------------+
| Andrew    | Andr       | Adams    | Ad        | andrad        |
| Nancy     | Nanc       | Edwards  | Ed        | nanced        |
| Jane      | Jane       | Peacock  | Pe        | janepe        |
| Margaret  | Marg       | Park     | Pa        | margpa        |
| Steve     | Stev       | Johnson  | Jo        | stevjo        |
| Michael   | Mich       | Mitchell | Mi        | michmi        |
| Robert    | Robe       | King     | Ki        | robeki        |
| Laura     | Laur       | Callahan | Ca        | laurca        |
+-----------+------------+----------+-----------+---------------+


What is the final result for Robert King?

A2) robeki





Q3) Show a list of employees who have worked for the company for 15 or more years using the current date function. Sort by lastname ascending.

SQL Query:

SELECT
    EmployeeId,
    LastName,
    FirstName,
    HireDate,
    ((JULIANDAY(CURRENT_DATE) - JULIANDAY(HireDate)) / 365) AS TenureYears
FROM
    Employees
WHERE
    TenureYears >= 15
ORDER BY
    LastName ASC


SQL Output:

+------------+----------+-----------+---------------------+--------------------+
| EmployeeId | LastName | FirstName | HireDate            |        TenureYears |
+------------+----------+-----------+---------------------+--------------------+
|          1 | Adams    | Andrew    | 2002-08-14 00:00:00 | 21.854794520547944 |
|          8 | Callahan | Laura     | 2004-03-04 00:00:00 |   20.2986301369863 |
|          2 | Edwards  | Nancy     | 2002-05-01 00:00:00 |  22.14246575342466 |
|          5 | Johnson  | Steve     | 2003-10-17 00:00:00 |  20.67945205479452 |
|          7 | King     | Robert    | 2004-01-02 00:00:00 |  20.46849315068493 |
|          6 | Mitchell | Michael   | 2003-10-17 00:00:00 |  20.67945205479452 |
|          4 | Park     | Margaret  | 2003-05-03 00:00:00 | 21.136986301369863 |
|          3 | Peacock  | Jane      | 2002-04-01 00:00:00 | 22.224657534246575 |
+------------+----------+-----------+---------------------+--------------------+


What is the lastname of the last person on the list returned?

A3) Peacock





Q4) Profiling the Customers table, answer the following question.

SQL Query:

SELECT
    COUNT(*) AS CompanyNulls
FROM
    Customers
WHERE
    Company IS NULL


SQL Output:

+--------------+
| CompanyNulls |
+--------------+
|           49 |
+--------------+



SQL Query:

SELECT
    COUNT(*) AS PhoneNulls
FROM
    Customers
WHERE
    Phone IS NULL


SQL Output:

+------------+
| PhoneNulls |
+------------+
|          1 |
+------------+



SQL Query:

SELECT
    COUNT(*) AS PostalCodeNulls
FROM
    Customers
WHERE
    PostalCode IS NULL


SQL Output:

+-----------------+
| PostalCodeNulls |
+-----------------+
|               4 |
+-----------------+



SQL Query:

SELECT
    COUNT(*) AS FirstNameNulls
FROM
    Customers
WHERE
    FirstName IS NULL


SQL Output:

+----------------+
| FirstNameNulls |
+----------------+
|              0 |
+----------------+



SQL Query:

SELECT
    COUNT(*) AS FaxNulls
FROM
    Customers
WHERE
    Fax IS NULL


SQL Output:

+----------+
| FaxNulls |
+----------+
|       47 |
+----------+



SQL Query:

SELECT
    COUNT(*) AS AddressNulls
FROM
    Customers
WHERE
    Address IS NULL


SQL Output:

+--------------+
| AddressNulls |
+--------------+
|            0 |
+--------------+


A4)
- Company
- Phone
- Postal Code
- Fax





Q5) Find the cities with the most customers and rank in descending order.

SQL Query:

SELECT
    COUNT(City) AS NumCustomers,
    City
FROM
    Customers
GROUP BY
    City
--HAVING
--   NumCustomers = 2
ORDER BY
    COUNT(City) DESC


SQL Output:

+--------------+---------------+
| NumCustomers | City          |
+--------------+---------------+
|            2 | Berlin        |
|            2 | London        |
|            2 | Mountain View |
|            2 | Paris         |
|            2 | Prague        |
|            2 | São Paulo     |
|            1 | Amsterdam     |
|            1 | Bangalore     |
|            1 | Bordeaux      |
|            1 | Boston        |
|            1 | Brasília      |
|            1 | Brussels      |
|            1 | Budapest      |
|            1 | Buenos Aires  |
|            1 | Chicago       |
|            1 | Copenhagen    |
|            1 | Cupertino     |
|            1 | Delhi         |
|            1 | Dijon         |
|            1 | Dublin        |
|            1 | Edinburgh     |
|            1 | Edmonton      |
|            1 | Fort Worth    |
|            1 | Frankfurt     |
|            1 | Halifax       |
+--------------+---------------+
(Output limit exceeded, 25 of 53 total rows shown)


A5)
- São Paulo
- Mountain View
- London





Q6) Create a new customer invoice id by combining a customer’s invoice id with their first and last name while ordering your query in the following order: firstname, lastname, and invoiceID.

SQL Query:

SELECT
    (c.FirstName || c.LastName || i.InvoiceId) AS NewInvoiceId
FROM
    Customers c INNER JOIN Invoices i ON c.CustomerId = i.CustomerId
ORDER BY
    c.FirstName, c.LastName, i.InvoiceId


SQL Output:

+-------------------+
| NewInvoiceId      |
+-------------------+
| AaronMitchell50   |
| AaronMitchell61   |
| AaronMitchell116  |
| AaronMitchell245  |
| AaronMitchell268  |
| AaronMitchell290  |
| AaronMitchell342  |
| AlexandreRocha57  |
| AlexandreRocha68  |
| AlexandreRocha123 |
| AlexandreRocha252 |
| AlexandreRocha275 |
| AlexandreRocha297 |
| AlexandreRocha349 |
| AstridGruber78    |
| AstridGruber89    |
| AstridGruber144   |
| AstridGruber273   |
| AstridGruber296   |
| AstridGruber318   |
| AstridGruber370   |
| BjørnHansen2      |
| BjørnHansen24     |
| BjørnHansen76     |
| BjørnHansen197    |
+-------------------+
(Output limit exceeded, 25 of 412 total rows shown)


Select all of the correct "AstridGruber" entries that are returned in your results below. Select all that apply.

A6)
- AstridGruber273
- AstridGruber296
- AstridGruber370
